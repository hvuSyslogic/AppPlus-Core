<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#
fileManager.StartHeader();
// Copyright (C) Simon Hughes 2012
// v2.24.0
#>
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     ElementsToGenerate.HasFlag(Elements.Context) ||
     ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(PocoNamespace)))
    usingsAll.Add(PocoNamespace);

if (ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(ContextNamespace)))
    usingsAll.Add(ContextNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) &&
    (!ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(UnitOfWorkNamespace)))
    usingsAll.Add(UnitOfWorkNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) && 
    (!ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(PocoConfigurationNamespace)))
        usingsAll.Add(PocoConfigurationNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context))
{
    if (AddUnitTestingDbContext || storedProcs.Any())
    {
        usingsContext.Add("System.Linq");
    }
}

if (!GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct()) { #>
using <#= usingStatement #>;
<# } #>

namespace <#=Namespace#>
{
<#
 if(!string.IsNullOrWhiteSpace(MigrationConfigurationFileName)) {
       fileManager.StartNewFile(MigrationConfigurationFileName + FileExtension);  #>
<# if(!GenerateSeparateFiles) { #>
    // ************************************************************************
    // Db Migration Configuration
<# } #>
    <#= CodeGeneratedAttribute #>
    internal sealed <# if(MakeClassesPartial) { #>partial <# } #>class <#=MigrationConfigurationFileName#> : System.Data.Entity.Migrations.DbMigrationsConfiguration<<#=DbContextName#>>
    {
        public <#=MigrationConfigurationFileName#>()
        {
            AutomaticMigrationsEnabled = <# if (AutomaticMigrationsEnabled) { #>true<# } else { #>false<# } #>;
            AutomaticMigrationDataLossAllowed = <# if (AutomaticMigrationDataLossAllowed) { #>true<# } else { #>false<# } #>;
<# if (!string.IsNullOrEmpty(ContextKey)) { #>
            ContextKey = "<#= ContextKey #>";
<# } #>
        }

        //protected override void Seed(<#=DbContextName#> context)
        //{
           
            // This method will be called after migrating to the latest version.

            // You can use the DbSet<T>.AddOrUpdate() helper extension method 
            // to avoid creating duplicate seed data. E.g.
            //
            //   context.People.AddOrUpdate(
            //     p => p.FullName,
            //     new Person { FullName = "Andrew Peters" },
            //     new Person { FullName = "Brice Lambson" },
            //     new Person { FullName = "Rowan Miller" }
            //   );
            //
        //}
    }

<# }
if(ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !GenerateSeparateFiles) { #>
    #endregion

<# } #>
<# 
    if (ElementsToGenerate.HasFlag(Elements.Context) && AddUnitTestingDbContext)
    {
        fileManager.StartNewFile("Fake" + DbContextName + FileExtension); #>
<# if (!GenerateSeparateFiles)
{ #>
    #region Fake Database context

<# } else {
foreach(var usingStatement in usingsContext.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>

<# } #>
    <#= CodeGeneratedAttribute #>
    public <# if(MakeClassesPartial) { #>partial <# } #>class Fake<#=DbContextName #> : I<#=DbContextName #>
    {
<#
foreach (Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        public System.Data.Entity.DbSet<<#=tbl.NameHumanCase #>> <#=Inflector.MakePlural(tbl.NameHumanCase) #> { get; set; }
<# } #>

        public Fake<#=DbContextName #>()
        {
<#
foreach (Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
            <#=Inflector.MakePlural(tbl.NameHumanCase) #> = new FakeDbSet<<#=tbl.NameHumanCase #>>(<#= string.Join(", ", tbl.PrimaryKeys.Select(x => "\"" + x.NameHumanCase + "\"")) #>);
<# } #>
<#if(MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }
<#foreach (string s in AdditionalContextInterfaceItems.Where(x => !string.IsNullOrEmpty(x)))
{ #>
        public <#=s.TrimEnd(';') #>
        {
            throw new System.NotImplementedException();
        }

<# } #>

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }
<# if (IsSupportedFrameworkVersion("4.5")) { #>

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
<# } #>
<#if(MakeClassesPartial) {#>

        partial void InitializePartial();
<#}#>

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
<# if (storedProcs.Any())
{ #>

        // Stored Procedures
<#      // Fake
foreach (StoredProcedure sp in storedProcs.Where(s => !s.IsTVF))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
    string spExecName = WriteStoredProcFunctionName(sp);
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount > 0)
    { #>
        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            int procResult;
            return <#= spExecName #>(<#=WriteStoredProcFunctionOverloadCall(sp) #>);
        }

        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, true) #>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #>
            procResult = 0;
            return new <#=WriteStoredProcReturnType(sp) #>();
        }
<# if (IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0) { #>

        public System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp)#>> <#=WriteStoredProcFunctionName(sp) #>Async(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(<#= spExecName #>(<#=WriteStoredProcFunctionOverloadCall(sp) #>));
        }
<# } #>

<#  } else { #>
        public int <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, true)#>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #> 
            return 0;
        }
<# if (IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0) { #>

        public System.Threading.Tasks.Task<int> <#= spExecName #>Async(<#=WriteStoredProcFunctionParams(sp, false)#>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #> 
            return System.Threading.Tasks.Task.FromResult(0);
        }
<# } #>

<# }}
if (IncludeTableValuedFunctions)
{ #>
        // Table Valued Functions
<#
    foreach (StoredProcedure spTvf in storedProcs.Where(s => s.IsTVF))
    {
        string spExecNamespTvf = WriteStoredProcFunctionName(spTvf);
        string spReturnClassName = WriteStoredProcReturnModelName(spTvf);
#>
        [System.Data.Entity.DbFunction("<#=DbContextName#>", "<#=spTvf.Name#>")]
        public IQueryable<<#= spReturnClassName #>> <#= spExecNamespTvf #>(<#=WriteStoredProcFunctionParams(spTvf, false)#>)
        {
            return new System.Collections.Generic.List<<#= spReturnClassName #>>().AsQueryable();
        }

<#
    }
}
}/**/#>
    }
<#fileManager.StartNewFile("FakeDbSet" + FileExtension); #>
<# if(GenerateSeparateFiles) { #>
    using System.Linq;
<# } #>

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    <#= CodeGeneratedAttribute #>
    public <# if(MakeClassesPartial) { #>partial <# } #>class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity><# if (IsSupportedFrameworkVersion("4.5")) { #>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity><# } #> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
<#if(MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
			
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
<#if(MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }
<# if (IsSupportedFrameworkVersion("4.5")) { #>

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }
<#}#>

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
<# if (IsSupportedFrameworkVersion("4.5")) { #>
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
<# } else { #>
            get { return _query.Provider; }
<# } #>
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }
<# if (IsSupportedFrameworkVersion("4.5")) { #>

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
<# } #>
<#if(MakeClassesPartial) {#>

        partial void InitializePartial();
<#}#>    }
<# if (IsSupportedFrameworkVersion("4.5"))
{ #>

    <#= CodeGeneratedAttribute #>
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    <#= CodeGeneratedAttribute #>
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    <#= CodeGeneratedAttribute #>
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }
<# } #>
<# }
 if(ElementsToGenerate.HasFlag(Elements.Context) && AddUnitTestingDbContext && !GenerateSeparateFiles) { #>

    #endregion


<# }
 if(ElementsToGenerate.HasFlag(Elements.Poco)){
 if(!GenerateSeparateFiles) { #>
    #region Service classes
	
<# } #>
<#
foreach(Table tbl in from t in tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
	if (!WithPrimarykey(tbl)) continue;
#>
<# fileManager.StartNewFile(tbl.NameHumanCase + "Service" + FileExtension);
if(!tbl.HasPrimaryKey) { #>
    // The table '<#=tbl.Name#>' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
<# } #>
<#if(IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
	<# if(AddWcfDataAttributes) { #>[GlobalExceptionHandlerBehaviourAttribute(typeof(GlobalExceptionHandler))]
<# }#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#>Service<#=WriteServiceBaseClasses != null ? WriteServiceBaseClasses(tbl) : "" #>
    {
    }
<# } }
if(ElementsToGenerate.HasFlag(Elements.Poco) && !GenerateSeparateFiles) { #>
    #endregion


<# } #>
<# 
if(storedProcs.Any() && ElementsToGenerate.HasFlag(Elements.Poco)){
if(!GenerateSeparateFiles) { #>
    #region Stored procedure return models

<# } #>
<#
foreach(StoredProcedure sp in storedProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !StoredProcedureReturnTypes.ContainsKey(x.Name)))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
<# fileManager.StartNewFile(spReturnClassName + FileExtension);#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#= spReturnClassName #>
    {
<#
int DataMemberOrder = 1;
var returnModelCount = sp.ReturnModels.Count;
if(returnModelCount < 2)
{
    foreach (var returnColumn in sp.ReturnModels.First())
    { #>
<# if(AddWcfDataAttributes) { #>        [System.Runtime.Serialization.DataMember(Order = <#=DataMemberOrder++#>, IsRequired = <#=StoredProcedure.IsNullable(returnColumn) ? "false" : "true"#>)]
<# } #>
        <#= WriteStoredProcReturnColumn(returnColumn) #>
<#  }
} else {
    int model = 0;
    foreach (var returnModel in sp.ReturnModels)
    {
        int SubDataMemberOrder = 1;
        model++;#>
        <#= CodeGeneratedAttribute #>
        public class ResultSetModel<#= model #>
        {
<#      foreach (var returnColumn in returnModel)
        { #>
<# if(AddWcfDataAttributes) { #>            [System.Runtime.Serialization.DataMember(Order = <#=SubDataMemberOrder++#>, IsRequired = <#=StoredProcedure.IsNullable(returnColumn) ? "false" : "true"#>)]
<# } #>
            <#= WriteStoredProcReturnColumn(returnColumn) #>
<#      }#>
        }
<# if(AddWcfDataAttributes) { #>        [System.Runtime.Serialization.DataMember(Order = <#=DataMemberOrder++#>, IsRequired = true)]
<# } #>
        public System.Collections.Generic.List<ResultSetModel<#= model #>> ResultSet<#= model #>;

<#  } #>
<# } #>
    }
<# }
if(storedProcs.Any() && ElementsToGenerate.HasFlag(Elements.Poco) && !GenerateSeparateFiles) { #>
    #endregion

<# } } #>
<# fileManager.StartFooter(); #>
}
<# fileManager.EndBlock();
if(GenerateSeparateFiles)
    fileManager.Process(); #>
